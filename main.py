import asyncio
import aiosqlite
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
)

TOKEN = "7636666169:AAGv_yAKdQOGh5ZQzRBJDgVTYE4T5u0dN1U"
ADMIN_ID = 1048803501

bot = Bot(token=TOKEN)
dp = Dispatcher()
DB_NAME = "orders.db"

# –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã
admin_context = {}          # admin_id -> order_id (–¥–ª—è –æ—Ç–≤–µ—Ç–∞)
user_context = {}           # user_id -> True/False (–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞)

# ====== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î ======
async def init_db():
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                username TEXT,
                text TEXT,
                media_id TEXT,
                media_type TEXT,
                status TEXT
            )
        """)
        await db.commit()

# ====== –°–¢–ê–†–¢ ======
@dp.message(Command("start"))
async def start(message: Message):
    user_context[message.from_user.id] = False
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìö –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="new_order")],
        [InlineKeyboardButton(text="üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="active_orders")],
        [InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", callback_data="history_orders")]
    ])
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# ====== –ù–û–í–´–ô –ó–ê–ö–ê–ó ======
@dp.callback_query(F.data == "new_order")
async def new_order_start(callback: CallbackQuery):
    user_context[callback.from_user.id] = True
    await callback.message.answer("‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å –∑–∞–¥–∞–Ω–∏–µ (—Ç–µ–∫—Å—Ç + –º–µ–¥–∏–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ).")
    await callback.answer()

# ====== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ======
@dp.message(F.text | F.photo | F.document | F.video | F.audio | F.voice)
async def handle_message(message: Message):
    user_id = message.from_user.id

    # 1Ô∏è‚É£ –ê–¥–º–∏–Ω –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–∞
    if user_id == ADMIN_ID and admin_context.get(ADMIN_ID):
        order_id = admin_context[ADMIN_ID]

        # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with aiosqlite.connect(DB_NAME) as db:
            cur = await db.execute("SELECT user_id FROM orders WHERE id=?", (order_id,))
            res = await cur.fetchone()
        if not res:
            await message.answer("‚ö†Ô∏è –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            admin_context[ADMIN_ID] = None
            return
        target_user_id = res[0]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
        media_id, media_type = None, None
        if message.photo:
            media_id = message.photo[-1].file_id
            media_type = "photo"
        elif message.document:
            media_id = message.document.file_id
            media_type = "document"
        elif message.video:
            media_id = message.video.file_id
            media_type = "video"
        elif message.audio:
            media_id = message.audio.file_id
            media_type = "audio"
        elif message.voice:
            media_id = message.voice.file_id
            media_type = "voice"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –æ—Ç–≤–µ—Ç
        if media_id:
            send_media = {
                "photo": bot.send_photo,
                "document": bot.send_document,
                "video": bot.send_video,
                "audio": bot.send_audio,
                "voice": bot.send_voice,
            }[media_type]
            await send_media(target_user_id, media_id, caption=message.caption or "", reply_markup=None)
        if message.text:
            await bot.send_message(target_user_id, f"üí¨ –û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞ –∑–∞–∫–∞–∑ ‚Ññ{order_id}:\n{message.text}")

        await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        async with aiosqlite.connect(DB_NAME) as db:
            await db.execute("UPDATE orders SET status='–û—Ç–≤–µ—Ç –¥–∞–Ω' WHERE id=?", (order_id,))
            await db.commit()

        admin_context[ADMIN_ID] = None
        return

    # 2Ô∏è‚É£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    if not user_context.get(user_id):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–∂–∞–ª "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"

    text = message.caption or message.text or "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"
    media_id, media_type = None, None

    if message.photo:
        media_id = message.photo[-1].file_id
        media_type = "photo"
    elif message.document:
        media_id = message.document.file_id
        media_type = "document"
    elif message.video:
        media_id = message.video.file_id
        media_type = "video"
    elif message.audio:
        media_id = message.audio.file_id
        media_type = "audio"
    elif message.voice:
        media_id = message.voice.file_id
        media_type = "voice"

    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("""
            INSERT INTO orders (user_id, username, text, media_id, media_type, status)
            VALUES (?, ?, ?, ?, ?, ?)
        """, (user_id, message.from_user.username, text, media_id, media_type, "–ê–∫—Ç–∏–≤–Ω—ã–π"))
        await db.commit()
        cur = await db.execute("SELECT last_insert_rowid()")
        order_id = (await cur.fetchone())[0]

    await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{order_id} –ø—Ä–∏–Ω—è—Ç! –û–∂–∏–¥–∞–π –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")
    user_context[user_id] = False  # –°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
    admin_text = f"üì© *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order_id}*\nüë§ @{message.from_user.username}\nüí¨ {text}"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑", callback_data=f"admin_close_{order_id}")],
        [InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"admin_reply_{order_id}")]
    ])
    if media_id:
        send_media = {
            "photo": bot.send_photo,
            "document": bot.send_document,
            "video": bot.send_video,
            "audio": bot.send_audio,
            "voice": bot.send_voice,
        }[media_type]
        await send_media(ADMIN_ID, media_id, caption=admin_text, parse_mode="Markdown", reply_markup=keyboard)
    else:
        await bot.send_message(ADMIN_ID, admin_text, parse_mode="Markdown", reply_markup=keyboard)


# ====== –ö–ù–û–ü–ö–ò –ê–ö–¢–ò–í–ù–´–• –ó–ê–ö–ê–ó–û–í ======
@dp.callback_query(F.data == "active_orders")
async def show_active(callback: CallbackQuery):
    async with aiosqlite.connect(DB_NAME) as db:
        async with db.execute("SELECT id, text FROM orders WHERE user_id=? AND status='–ê–∫—Ç–∏–≤–Ω—ã–π'", (callback.from_user.id,)) as cursor:
            orders = await cursor.fetchall()

    if not orders:
        await callback.message.answer("üòå –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        await callback.answer()
        return

    for o in orders:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancel_{o[0]}")]
        ])
        await callback.message.answer(f"üü¢ –ó–∞–∫–∞–∑ ‚Ññ{o[0]} ‚Äî {o[1][:50]}...", reply_markup=keyboard)
    await callback.answer()


# ====== –û–¢–ú–ï–ù–ê –ó–ê–ö–ê–ó–ê ======
@dp.callback_query(F.data.startswith("cancel_"))
async def cancel_order(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[1])
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("UPDATE orders SET status='–û—Ç–º–µ–Ω—ë–Ω' WHERE id=?", (order_id,))
        await db.commit()
    await callback.message.edit_text(f"‚ùå –ó–∞–∫–∞–∑ ‚Ññ{order_id} –æ—Ç–º–µ–Ω—ë–Ω.")
    await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")


# ====== –ò–°–¢–û–†–ò–Ø –ó–ê–ö–ê–ó–û–í ======
@dp.callback_query(F.data == "history_orders")
async def show_history(callback: CallbackQuery):
    async with aiosqlite.connect(DB_NAME) as db:
        async with db.execute("SELECT id, text, status FROM orders WHERE user_id=?", (callback.from_user.id,)) as cursor:
            orders = await cursor.fetchall()

    if not orders:
        await callback.message.answer("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        await callback.answer()
        return

    msg = "üìú *–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:*\n\n"
    for o in orders:
        msg += f"‚Ä¢ ‚Ññ{o[0]} ‚Äî {o[1][:40]}... ({o[2]})\n"
    await callback.message.answer(msg, parse_mode="Markdown")
    await callback.answer()


# ====== –ê–î–ú–ò–ù: –ó–ê–ö–†–´–¢–¨ –ó–ê–ö–ê–ó ======
@dp.callback_query(F.data.startswith("admin_close_"))
async def admin_close(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("‚õî –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)

    order_id = int(callback.data.split("_")[2])
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("UPDATE orders SET status='–ó–∞–∫—Ä—ã—Ç' WHERE id=?", (order_id,))
        await db.commit()

        cur = await db.execute("SELECT user_id FROM orders WHERE id=?", (order_id,))
        user_id = (await cur.fetchone())[0]
        await bot.send_message(user_id, f"‚úÖ –¢–≤–æ–π –∑–∞–∫–∞–∑ ‚Ññ{order_id} –∑–∞–∫—Ä—ã—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.")

    await callback.message.edit_text(f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{order_id} –∑–∞–∫—Ä—ã—Ç.")
    await callback.answer("–ó–∞–∫–∞–∑ –∑–∞–∫—Ä—ã—Ç.")


# ====== –ê–î–ú–ò–ù: –û–¢–í–ï–¢–ò–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ ======
@dp.callback_query(F.data.startswith("admin_reply_"))
async def admin_reply(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("‚õî –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)

    order_id = int(callback.data.split("_")[2])
    admin_context[ADMIN_ID] = order_id
    await callback.message.answer(f"‚úèÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–∫–∞–∑ ‚Ññ{order_id}:")
    await callback.answer()


# ====== –ó–ê–ü–£–°–ö ======
async def main():
    await init_db()
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
